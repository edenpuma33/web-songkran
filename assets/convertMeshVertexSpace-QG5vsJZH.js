import{af as p,s as m,bk as s}from"./index-CorgkmYx.js";import{p as n}from"./MeshVertexAttributes-bH-5vyf6.js";import{B as a}from"./vertexSpaceConversion-BdhAJlfF.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-r_S_8DDe.js";import"./computeTranslationToOriginAndRotation-BhJmC_0D.js";import"./projectPointToVector-BSiCSeaS.js";import"./meshVertexSpaceUtils-Cu1f-oO7.js";import"./MeshLocalVertexSpace-DAVvI3Z3.js";import"./vec3-BwzP2Z1Q.js";import"./BufferView-BTSIaNVu.js";import"./vec4-CHTwQPOE.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
