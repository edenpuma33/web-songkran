const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/ElevationQuery-CqoniJag.js","assets/index-CorgkmYx.js","assets/index-CxdEf2vt.css"])))=>i.map(i=>d[i]);
import{fl as v,a3 as g,a0 as w,fZ as b,af as p,ez as V,eo as T,ep as D,eq as S,jD as $,s as L,bc as x,D as c,fb as k,_ as f,cP as I,r as l,t as n,Q as y,h0 as E,ey as M,x as N}from"./index-CorgkmYx.js";import{p as O}from"./ArcGISCachedService-BPuDD4hy.js";import"./TileInfoTilemapCache-DlMgW5av.js";import"./TilemapCache-CZ6LPrnm.js";import"./ByteSizeUnit-BsxeN7wM.js";class j{constructor(e,t,s,a){this._hasNoDataValues=null,this._minValue=null,this._maxValue=null,"pixelData"in e?(this.values=e.pixelData,this.width=e.width,this.height=e.height,this.noDataValue=e.noDataValue):(this.values=e,this.width=t,this.height=s,this.noDataValue=a)}get hasNoDataValues(){if(this._hasNoDataValues==null){const e=this.noDataValue;this._hasNoDataValues=this.values.includes(e)}return this._hasNoDataValues}get minValue(){return this._ensureBounds(),this._minValue}get maxValue(){return this._ensureBounds(),this._maxValue}_ensureBounds(){if(this._minValue!=null)return;const{noDataValue:e,values:t}=this;let s=1/0,a=-1/0,h=!0;for(const o of t)o===e?this._hasNoDataValues=!0:(s=o<s?o:s,a=o>a?o:a,h=!1);h?(this._minValue=0,this._maxValue=0):(this._minValue=s,this._maxValue=a>-3e38?a:0)}}class P{constructor(e,t,s,a,h={}){this._mainMethod=t,this._transferLists=s,this._listeners=[],this._promise=v(e,{...h,schedule:a}).then(o=>{if(this._thread===void 0){this._thread=o,this._promise=null,h.hasInitialize&&this.broadcast({},"initialize");for(const u of this._listeners)this._connectListener(u)}else o.close()}),this._promise.catch(o=>g.getLogger("esri.core.workers.WorkerHandle").error(`Failed to initialize ${e} worker: ${o}`))}on(e,t){const s={removed:!1,eventName:e,callback:t,threadHandle:null};return this._listeners.push(s),this._connectListener(s),w(()=>{s.removed=!0,b(this._listeners,s),this._thread&&s.threadHandle!=null&&s.threadHandle.remove()})}destroy(){this._thread&&(this._thread.close(),this._thread=null),this._promise=null,this._listeners.length=0,this._transferLists={}}invoke(e,t){return this.invokeMethod(this._mainMethod,e,t)}invokeMethod(e,t,s){if(this._thread){const a=this._transferLists[e],h=a?a(t):[];return this._thread.invoke(e,t,{transferList:h,signal:s})}return this._promise?this._promise.then(()=>(p(s),this.invokeMethod(e,t,s))):Promise.reject(null)}broadcast(e,t){return this._thread?Promise.all(this._thread.broadcast(t,e)).then(()=>{}):this._promise?this._promise.then(()=>this.broadcast(e,t)):Promise.reject()}get promise(){return this._promise}_connectListener(e){this._thread&&this._thread.on(e.eventName,e.callback).then(t=>{e.removed||(e.threadHandle=t)})}}class m extends P{constructor(e=null){super("LercWorker","_decode",{_decode:t=>[t.buffer]},e,{strategy:"dedicated"}),this.schedule=e,this.ref=0}decode(e,t,s){return e&&e.byteLength!==0?this.invoke({buffer:e,options:t},s):Promise.resolve(null)}release(){--this.ref<=0&&(d.forEach((e,t)=>{e===this&&d.delete(t)}),this.destroy())}}const d=new Map;function A(i=null){let e=d.get(i);return e||(i!=null?(e=new m(t=>i.immediate.schedule(t)),d.set(i,e)):(e=new m,d.set(null,e))),++e.ref,e}let r=class extends O(V(T(D(S(I))))){constructor(...i){super(...i),this.capabilities={operations:{supportsTileMap:!1}},this.copyright=null,this.heightModelInfo=null,this.path=null,this.minScale=void 0,this.maxScale=void 0,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=A()}normalizeCtorArgs(i,e){return typeof i=="string"?{url:i,...e}:i}destroy(){this._lercDecoder=$(this._lercDecoder)}readCapabilities(i,e){const t=e.capabilities&&e.capabilities.split(",").map(s=>s.toLowerCase().trim());return t?{operations:{supportsTileMap:t.includes("tilemap")}}:{operations:{supportsTileMap:!1}}}readVersion(i,e){let t=e.currentVersion;return t||(t=9.3),t}load(i){const e=i!=null?i.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:t=>{if(t.typeKeywords){for(let s=0;s<t.typeKeywords.length;s++)if(t.typeKeywords[s].toLowerCase()==="elevation 3d layer")return!0}throw new L("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},i).catch(x).then(()=>this._fetchImageService(e))),Promise.resolve(this)}fetchTile(i,e,t,s){const a=(s=s||{signal:null}).signal!=null?s.signal:s.signal=new AbortController().signal,h={responseType:"array-buffer",signal:a},o={noDataValue:s.noDataValue,returnFileInfo:!0};return this.load().then(()=>this._fetchTileAvailability(i,e,t,s)).then(()=>c(this.getTileUrl(i,e,t),h)).then(u=>this._lercDecoder.decode(u.data,o,a)).then(u=>new j(u))}getTileUrl(i,e,t){const s=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,a=k({...this.parsedUrl.query,blankTile:!s&&null});return`${this.parsedUrl.path}/tile/${i}/${e}/${t}${a?"?"+a:""}`}async queryElevation(i,e){const{ElevationQuery:t}=await f(()=>import("./ElevationQuery-CqoniJag.js"),__vite__mapDeps([0,1,2]));return p(e),new t().query(this,i,e)}async createElevationSampler(i,e){const{ElevationQuery:t}=await f(()=>import("./ElevationQuery-CqoniJag.js"),__vite__mapDeps([0,1,2]));return p(e),new t().createSampler(this,i,e)}_fetchTileAvailability(i,e,t,s){return this.tilemapCache?this.tilemapCache.fetchAvailability(i,e,t,s):Promise.resolve("unknown")}async _fetchImageService(i){var s;if(this.sourceJSON)return this.sourceJSON;const e={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:i},t=await c(this.parsedUrl.path,e);t.ssl&&(this.url=(s=this.url)==null?void 0:s.replace(/^http:/i,"https:")),this.sourceJSON=t.data,this.read(t.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile[_]}};l([n({readOnly:!0})],r.prototype,"capabilities",void 0),l([y("service","capabilities",["capabilities"])],r.prototype,"readCapabilities",null),l([n({json:{read:{source:"copyrightText"}}})],r.prototype,"copyright",void 0),l([n({readOnly:!0,type:E})],r.prototype,"heightModelInfo",void 0),l([n({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],r.prototype,"path",void 0),l([n({type:["show","hide"]})],r.prototype,"listMode",void 0),l([n({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],r.prototype,"minScale",void 0),l([n({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],r.prototype,"maxScale",void 0),l([n({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],r.prototype,"opacity",void 0),l([n({type:["ArcGISTiledElevationServiceLayer"]})],r.prototype,"operationalLayerType",void 0),l([n()],r.prototype,"sourceJSON",void 0),l([n({json:{read:!1},value:"elevation",readOnly:!0})],r.prototype,"type",void 0),l([n(M)],r.prototype,"url",void 0),l([n()],r.prototype,"version",void 0),l([y("version",["currentVersion"])],r.prototype,"readVersion",null),r=l([N("esri.layers.ElevationLayer")],r);const _=Symbol("default-fetch-tile");r.prototype.fetchTile[_]=!0;const J=r;export{J as default};
