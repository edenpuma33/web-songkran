import{aQ as _,s as G,aR as B,aS as tt,aT as v,aU as et,g as D,aV as nt,q as at,R as st,aW as it}from"./index-CorgkmYx.js";function H(t){if(!t)return null;const n=t.wkid;if(n)return tt[n];const e=t.wkt2??t.wkt;return e?rt(e):null}function rt(t){const n=et.exec(t);if(!n||n.length!==2)return null;const e=n[1].split(",");if(!e||e.length<3)return null;const c=parseFloat(e[1]),a=parseFloat(e[2]);return isNaN(c)||isNaN(a)?null:{a:c,f:a===0?0:1/a}}function U(t){const n=H(t);if(ot(n))return n;const e=n.a*(1-n.f);return Object.assign(n,{b:e,eSq:1-(e/n.a)**2,radius:(2*n.a+e)/3,densificationRatio:1e4/((2*n.a+e)/3)})}function ot(t){return t!=null&&"b"in t&&"eSq"in t&&"radius"in t}function O(t,n,e){const{a:c,eSq:a}=U(e),s=Math.sqrt(a),i=Math.sin(n[1]*v),l=c*n[0]*v;let o;return a>0?o=c*((1-a)*(i/(1-a*(i*i))-1/(2*s)*Math.log((1-s*i)/(1+s*i))))*.5:o=c*i,t[0]=l,t[1]=o,t}function C(t){return _(t)&&!!H(t)}function lt(t,n="square-meters"){if(t.some(i=>!C(i.spatialReference)))throw new G("geodesic-areas:invalid-spatial-reference","the input geometries spatial reference is not supported");const e=[];for(let i=0;i<t.length;i++){const l=t[i],o=l.spatialReference,{radius:h,densificationRatio:u}=U(o),r=h*u;e.push(ht(l,r))}const c=[],a=[0,0],s=[0,0];for(let i=0;i<e.length;i++){const{rings:l,spatialReference:o}=e[i];let h=0;for(let u=0;u<l.length;u++){const r=l[u];O(a,r[0],o),O(s,r[r.length-1],o);let M=s[0]*a[1]-a[0]*s[1];for(let d=0;d<r.length-1;d++)O(a,r[d+1],o),O(s,r[d],o),M+=s[0]*a[1]-a[0]*s[1];h+=M}h=B(h,"square-meters",n),c.push(h/-2)}return c}function ut(t,n="meters"){if(!t)throw new G("geodesic-lengths:invalid-geometries","the input geometries type is not supported");if(t.some(c=>!C(c.spatialReference)))throw new G("geodesic-lengths:invalid-spatial-reference","the input geometries spatial reference is not supported");const e=[];for(let c=0;c<t.length;c++){const a=t[c],{spatialReference:s}=a,i=a.type==="polyline"?a.paths:a.rings;let l=0;for(let o=0;o<i.length;o++){const h=i[o];let u=0;for(let r=1;r<h.length;r++){const M=h[r-1][0],d=h[r][0],m=h[r-1][1],g=h[r][1];if(m!==g||M!==d){const p=new J;K(p,[M,m],[d,g],s),u+=p.distance}}l+=u}l=B(l,"meters",n),e.push(l)}return e}function ht(t,n){if(t.type!=="polyline"&&t.type!=="polygon")throw new G("geodesic-densify:invalid-geometry","the input geometry is neither polyline nor polygon");const{spatialReference:e}=t;if(!C(e))throw new G("geodesic-densify:invalid-spatial-reference","the input geometry spatial reference is not supported");const c=t.type==="polyline"?t.paths:t.rings,a=[],s=[0,0],i=new J;for(const o of c){const h=[];a.push(h),h.push([o[0][0],o[0][1]]);let u,r,M=o[0][0],d=o[0][1];for(let m=0;m<o.length-1;m++){if(u=o[m+1][0],r=o[m+1][1],M===u&&d===r)continue;const g=[M,d];K(i,[M,d],[u,r],e);const{azimuth:p,distance:R}=i,w=R/n;if(w>1){for(let A=1;A<=w-1;A++)T(s,g,p,A*n,e),h.push(s.slice());T(s,g,p,(R+Math.floor(w-1)*n)/2,e),h.push(s.slice())}T(s,g,p,R,e),h.push(s.slice()),M=s[0],d=s[1]}}const l=at(D,e);return t.type==="polyline"?new st({paths:a,spatialReference:l}):new it({rings:a,spatialReference:l})}class J{constructor(n=0,e=void 0,c=void 0){this.distance=n,this.azimuth=e,this.reverseAzimuth=c}}function T(t,n,e,c,a){const s=n[0],i=n[1],l=s*v,o=i*v,h=(e??0)*v,{a:u,b:r,f:M}=U(a),d=Math.sin(h),m=Math.cos(h),g=(1-M)*Math.tan(o),p=1/Math.sqrt(1+g*g),R=g*p,w=Math.atan2(g,m),A=p*d,j=A*A,z=1-j,f=z*(u*u-r*r)/(r*r),x=1+f/16384*(4096+f*(f*(320-175*f)-768)),F=f/1024*(256+f*(f*(74-47*f)-128));let q,N,y,I,k=c/(r*x),b=2*Math.PI;for(;Math.abs(k-b)>1e-12;)y=Math.cos(2*w+k),q=Math.sin(k),N=Math.cos(k),I=F*q*(y+F/4*(N*(2*y*y-1)-F/6*y*(4*q*q-3)*(4*y*y-3))),b=k,k=c/(r*x)+I;const S=R*q-p*N*m,P=Math.atan2(R*N+p*q*m,(1-M)*Math.sqrt(j+S*S)),E=Math.atan2(q*d,p*N-R*q*m),$=M/16*z*(4+M*(4-3*z)),W=P/v,Q=(l+(E-(1-$)*M*A*(k+$*q*(y+$*N*(2*y*y-1)))))/v;return t[0]=Q,t[1]=W,t}function K(t,n,e,c){const a=n[0]*v,s=n[1]*v,i=e[0]*v,l=e[1]*v,{a:o,b:h,f:u,radius:r}=U(c),M=i-a,d=Math.atan((1-u)*Math.tan(s)),m=Math.atan((1-u)*Math.tan(l)),g=Math.sin(d),p=Math.cos(d),R=Math.sin(m),w=Math.cos(m);let A,j,z,f,x,F,q,N,y,I,k=1e3,b=M;do{if(q=Math.sin(b),N=Math.cos(b),z=Math.sqrt(w*q*(w*q)+(p*R-g*w*N)*(p*R-g*w*N)),z===0)return t.distance=0,t.azimuth=void 0,t.reverseAzimuth=void 0,t;x=g*R+p*w*N,F=Math.atan2(z,x),y=p*w*q/z,j=1-y*y,f=x-2*g*R/j,isNaN(f)&&(f=0),I=u/16*j*(4+u*(4-3*j)),A=b,b=M+(1-I)*u*y*(F+I*z*(f+I*x*(2*f*f-1)))}while(Math.abs(b-A)>1e-12&&--k>0);if(k===0){const Q=r,L=Math.acos(Math.sin(s)*Math.sin(l)+Math.cos(s)*Math.cos(l)*Math.cos(i-a))*Q,V=i-a,X=Math.sin(V)*Math.cos(l),Y=Math.cos(s)*Math.sin(l)-Math.sin(s)*Math.cos(l)*Math.cos(V),Z=Math.atan2(X,Y);return t.azimuth=Z/v,t.distance=L,t.reverseAzimuth=void 0,t}const S=j*(o*o-h*h)/(h*h),P=S/1024*(256+S*(S*(74-47*S)-128)),E=h*(1+S/16384*(4096+S*(S*(320-175*S)-768)))*(F-P*z*(f+P/4*(x*(2*f*f-1)-P/6*f*(4*z*z-3)*(4*f*f-3)))),$=Math.atan2(w*Math.sin(b),p*R-g*w*Math.cos(b)),W=Math.atan2(p*Math.sin(b),p*R*Math.cos(b)-g*w);return t.azimuth=$/v,t.distance=E,t.reverseAzimuth=W/v,t}function ft(t){return C(t)?t:nt(t)?D.WGS84:null}export{ft as N,ut as R,J as b,T as j,K as q,lt as v,C as y};
