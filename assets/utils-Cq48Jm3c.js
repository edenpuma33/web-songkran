import{dg as C,dh as G,g as z,di as O,aZ as V,be as A,dj as D,dk as L,dl as E,dm as P,dn as R}from"./index-CorgkmYx.js";import{$ as U}from"./utils-CQfU_RhP.js";import{m as T,B as Y}from"./utils-MLLFkbKn.js";let c=null;const Z=/^(?<hh>([0-1][0-9])|([2][0-3])):(?<mm>[0-5][0-9])(:(?<ss>[0-5][0-9]))?([.](?<ms>\d+))?$/;function _(t,e,o){return t.x<0?t.x+=e:t.x>o&&(t.x-=e),t}function H(t,e,o,s){const a=O(o)?V(o):null,m=a?Math.round((a.valid[1]-a.valid[0])/e.scale[0]):null;return t.map(i=>{const r=new A(i.geometry);return D(e,r,r),i.geometry=a?_(r,m??0,s[0]):r,i})}function J(t,e=18,o,s,a){const m=new Float64Array(s*a);e=Math.round(R(e));let i=Number.POSITIVE_INFINITY,r=Number.NEGATIVE_INFINITY;const I=L(o);for(const{geometry:h,attributes:N}of t){const{x,y:u}=h,b=Math.max(0,x-e),M=Math.max(0,u-e),F=Math.min(a,u+e),g=Math.min(s,x+e),$=+I(N);for(let f=M;f<F;f++)for(let d=b;d<g;d++){const w=f*s+d,y=P(d-x,f-u,e)*$,l=m[w]+=y;i=Math.min(i,l),r=Math.max(r,l)}}return{min:i,max:r}}function k(t){const e=Z.exec(t);if(!e)return null;const{hh:o,mm:s,ss:a,ms:m}=e.groups;return Number(o)*E.hours+Number(s)*E.minutes+Number(a)*E.seconds+Number(m||0)}async function K(t,e,o=!0){if(!e)return[];const{field:s,field2:a,field3:m,fieldDelimiter:i,fieldInfos:r,timeZone:I}=t,h=s&&(r==null?void 0:r.find(l=>l.name.toLowerCase()===s.toLowerCase())),N=!!h&&C(h),x=!!h&&U(h),u=t.valueExpression,b=t.normalizationType,M=t.normalizationField,F=t.normalizationTotal,g=[],$=t.viewInfoParams;let f=null,d=null;if(u){if(!c){const{arcadeUtils:l}=await G();c=l}c.hasGeometryOperations(u)&&await c.enableGeometryOperations(),f=c.createFunction(u),d=$?c.getViewInfo({viewingMode:$.viewingMode,scale:$.scale,spatialReference:new z($.spatialReference)}):null}const w=t.fieldInfos,y=!(e[0]&&"declaredClass"in e[0]&&e[0].declaredClass==="esri.Graphic")&&w?{fields:w}:null;return e.forEach(l=>{const p=l.attributes;let n;if(u){const v=y?{...l,layer:y}:l,j=c.createExecContext(v,d,I);n=c.executeFunction(f,j)}else p&&(n=p[s],a?(n=`${T(n)}${i}${T(p[a])}`,m&&(n=`${n}${i}${T(p[m])}`)):typeof n=="string"&&o&&(x?n=n?new Date(n).getTime():null:N&&(n=n?k(n):null)));if(b&&typeof n=="number"&&isFinite(n)){const v=p&&parseFloat(p[M]);n=Y(n,b,v,F)}g.push(n)}),g}export{k as I,K as b,J as w,H as x};
