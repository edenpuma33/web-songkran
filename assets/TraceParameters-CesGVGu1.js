import{dp as g,r as e,t,x as p,l,q as m,g as j,z as b,fA as h,fB as i}from"./index-CorgkmYx.js";const a=new g({startingPoint:"starting-point",barrier:"barrier"});let o=class extends l{constructor(n){super(n),this.globalId=null,this.isFilterBarrier=!1,this.percentAlong=null,this.terminalId=null,this.type=null}};e([t({type:String,json:{write:!0}})],o.prototype,"globalId",void 0),e([t({type:Boolean,json:{write:!0}})],o.prototype,"isFilterBarrier",void 0),e([t({type:Number,json:{write:!0}})],o.prototype,"percentAlong",void 0),e([t({type:Number,json:{write:!0}})],o.prototype,"terminalId",void 0),e([t({type:a.apiValues,json:{type:a.jsonValues,read:{reader:a.read,source:"traceLocationType"},write:{writer:a.write,target:"traceLocationType"}}})],o.prototype,"type",void 0),o=e([p("esri.rest.networks.support.TraceLocation")],o);const T=o;var u;let r=u=class extends l{static from(n){return m(u,n)}constructor(n){super(n),this.namedTraceConfigurationGlobalId=null,this.gdbVersion=null,this.traceLocations=[],this.moment=null,this.outSpatialReference=null,this.traceConfiguration=null,this.resultTypes=null,this.traceType=null}writeOutSR(n,s,d){if(n!=null){const{wkid:y,latestWkid:c,wkt:f,wkt2:w}=n;s[d]=JSON.stringify({wkid:y??void 0,latestWkid:c??void 0,wkt:f??void 0,wkt2:w??void 0})}}};e([t({type:String,json:{read:{source:"traceConfigurationGlobalId"},write:{target:"traceConfigurationGlobalId"}}})],r.prototype,"namedTraceConfigurationGlobalId",void 0),e([t({type:String,json:{write:!0}})],r.prototype,"gdbVersion",void 0),e([t({type:[T],json:{write:!0}})],r.prototype,"traceLocations",void 0),e([t({type:Date,json:{type:Number,write:{writer:(n,s)=>{s.moment=n?n.getTime():null}}}})],r.prototype,"moment",void 0),e([t({type:j,json:{write:{allowNull:!0,target:"outSR"}}})],r.prototype,"outSpatialReference",void 0),e([b("outSpatialReference")],r.prototype,"writeOutSR",null),e([t({type:h,json:{write:!0}})],r.prototype,"traceConfiguration",void 0),e([t({type:[Object],json:{write:!0}})],r.prototype,"resultTypes",void 0),e([t({type:i.apiValues,json:{type:i.jsonValues,read:i.read,write:i.write}})],r.prototype,"traceType",void 0),r=u=e([p("esri.rest.networks.support.TraceParameters")],r);const S=r;export{S as default};
