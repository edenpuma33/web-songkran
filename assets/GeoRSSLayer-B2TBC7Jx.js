import{cN as u,en as y,eo as p,ep as d,cO as c,eq as h,cW as f,bc as S,D as m,bv as g,F as b,cP as v,r,t as o,Q as C,y as G,er as w,es as x,et as P,eu as a,ev as _,ew as R,ex as $,ey as k,x as F}from"./index-CorgkmYx.js";const j=["atom","xml"],E={base:a,key:"type",typeMap:{"simple-line":P},errorContext:"symbol"},M={base:a,key:"type",typeMap:{"picture-marker":R,"simple-marker":_},errorContext:"symbol"},D={base:a,key:"type",typeMap:{"simple-fill":$},errorContext:"symbol"};let t=class extends u(y(p(d(c(h(v)))))){constructor(...e){super(...e),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,s){return typeof e=="string"?{url:e,...s}:e}readFeatureCollections(e,s){return s.featureCollection.layers.forEach(n=>{var l;const i=n.layerDefinition.drawingInfo.renderer.symbol;i&&i.type==="esriSFS"&&((l=i.outline)!=null&&l.style.includes("esriSFS"))&&(i.outline.style="esriSLSSolid")}),s.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&this.originOf("title")!=="defaults"?e:this.url?f(this.url,j)||"GeoRSS":e}set title(e){this._set("title",e)}load(e){const s=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(S).then(()=>this._fetchService(s)).then(n=>{this.read(n,{origin:"service"})})),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){const s=this.spatialReference,{data:n}=await m(b.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:g(s)?void 0:s.wkid??JSON.stringify(s)},signal:e});return n}_hasGeometry(e){var s;return((s=this.featureCollections)==null?void 0:s.some(n=>{var i,l;return((i=n.featureSet)==null?void 0:i.geometryType)===e&&((l=n.featureSet.features)==null?void 0:l.length)>0}))??!1}};r([o()],t.prototype,"description",void 0),r([o()],t.prototype,"featureCollections",void 0),r([C("service","featureCollections",["featureCollection.layers"])],t.prototype,"readFeatureCollections",null),r([o({type:G,json:{name:"lookAtExtent"}})],t.prototype,"fullExtent",void 0),r([o(w)],t.prototype,"id",void 0),r([o(x)],t.prototype,"legendEnabled",void 0),r([o({types:E,json:{write:!0}})],t.prototype,"lineSymbol",void 0),r([o({type:["show","hide"]})],t.prototype,"listMode",void 0),r([o({types:M,json:{write:!0}})],t.prototype,"pointSymbol",void 0),r([o({types:D,json:{write:!0}})],t.prototype,"polygonSymbol",void 0),r([o({type:["GeoRSS"]})],t.prototype,"operationalLayerType",void 0),r([o(k)],t.prototype,"url",void 0),r([o({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],t.prototype,"title",null),r([o({readOnly:!0,json:{read:!1},value:"geo-rss"})],t.prototype,"type",void 0),t=r([F("esri.layers.GeoRSSLayer")],t);const O=t;export{O as default};
